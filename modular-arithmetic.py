'''
MODULAR ARITHMETIC(模数运算)

We say that two integers are congruent modulo m if a ≡ b mod m.

Another way of saying this, is that when we divide the integer a by m, the remainder is b. This tells you that if m divides a (this can be written as m ∣ a) then a ≡ 0 mod m.


a modulus p, and we will restrict ourselves to the case when p is prime.
The integers modulo p define a field, denoted F p.
If the modulus is not prime, the set of integers modulo n define a ring.
finite field 有限域：

Fermat's little theorem  We'll be needing this (and its generalisations) when we look at RSA cryptography.

3^17 % 17 = 3
5^17 % 17 = 5
7^16 % 17 = 1


Modular Inverting

g d ≡ 1 mod p

'''


def modular_inverting(g, p):
    i = 0
    while True:
        i+=1
        a = p * i + 1
        if a % g == 0:
            return a // g

modular_inverting(3, 13)
    
'''
Quadratic Residues

We've looked at multiplication and division in modular arithmetic, but what does it mean to take the square root modulo an integer?

For the following discussion, let's work modulo p=29. We can take the integer a=11 and calculate a^2=5 mod 29.
As a=11,a^2=5 a=11,a^2 = 5, we say the square root of 5 is 11.

We say that an integer x is a Quadratic Residue if there exists an a such that a^2 ≡ x mod p. If there is no such solution, then the integer is a Quadratic Non-Residue.

In other words, x is a quadratic residue when it is possible to take the square root of x modulo an integer p.
'''

def is_sqrt(a):
    for i in range(a//2):
        if i * i == a:
            return True

    return False

def is_quadratic_residue(x, p):

    i = 0
    while True:
        i+=1
        if i > 1000:
            break
        a = p * i + x
        if is_sqrt(a) == True:
            print(a)
            return True    
    return False

is_quadratic_residue(14, 29)
is_quadratic_residue(6, 29)
is_quadratic_residue(11, 29)

# solution2
p = 29
ints = [14, 6, 11]

qr = [a for a in range(p) if pow(a,2,p) in ints]
print(f"flag {min(qr)}")


'''
Legendre Symbol
Legendre's Symbol: (a/p) ≡ a^(p−1)/2 mod p obeys:
(a/p)=1 if a is a quadratic residue and a ≢ 0 mod p
(a/p)=−1 if a is a quadratic non-residue mod p
(a/p)=0 if a ≡ 0 mod p


'''

p = 101524035174539890485408575671085261788758965189060164484385690801466167356667036677932998889725476582421738788500738738503134356158197247473850273565349249573867251280253564698939768700489401960767007716413932851838937641880157263936985954881657889497583485535527613578457628399173971810541670838543309159139

ints = [25081841204695904475894082974192007718642931811040324543182130088804239047149283334700530600468528298920930150221871666297194395061462592781551275161695411167049544771049769000895119729307495913024360169904315078028798025169985966732789207320203861858234048872508633514498384390497048416012928086480326832803, 45471765180330439060504647480621449634904192839383897212809808339619841633826534856109999027962620381874878086991125854247108359699799913776917227058286090426484548349388138935504299609200377899052716663351188664096302672712078508601311725863678223874157861163196340391008634419348573975841578359355931590555, 17364140182001694956465593533200623738590196990236340894554145562517924989208719245429557645254953527658049246737589538280332010533027062477684237933221198639948938784244510469138826808187365678322547992099715229218615475923754896960363138890331502811292427146595752813297603265829581292183917027983351121325, 14388109104985808487337749876058284426747816961971581447380608277949200244660381570568531129775053684256071819837294436069133592772543582735985855506250660938574234958754211349215293281645205354069970790155237033436065434572020652955666855773232074749487007626050323967496732359278657193580493324467258802863, 4379499308310772821004090447650785095356643590411706358119239166662089428685562719233435615196994728767593223519226235062647670077854687031681041462632566890129595506430188602238753450337691441293042716909901692570971955078924699306873191983953501093343423248482960643055943413031768521782634679536276233318, 85256449776780591202928235662805033201684571648990042997557084658000067050672130152734911919581661523957075992761662315262685030115255938352540032297113615687815976039390537716707854569980516690246592112936796917504034711418465442893323439490171095447109457355598873230115172636184525449905022174536414781771, 50576597458517451578431293746926099486388286246142012476814190030935689430726042810458344828563913001012415702876199708216875020997112089693759638454900092580746638631062117961876611545851157613835724635005253792316142379239047654392970415343694657580353333217547079551304961116837545648785312490665576832987, 96868738830341112368094632337476840272563704408573054404213766500407517251810212494515862176356916912627172280446141202661640191237336568731069327906100896178776245311689857997012187599140875912026589672629935267844696976980890380730867520071059572350667913710344648377601017758188404474812654737363275994871, 4881261656846638800623549662943393234361061827128610120046315649707078244180313661063004390750821317096754282796876479695558644108492317407662131441224257537276274962372021273583478509416358764706098471849536036184924640593888902859441388472856822541452041181244337124767666161645827145408781917658423571721, 18237936726367556664171427575475596460727369368246286138804284742124256700367133250078608537129877968287885457417957868580553371999414227484737603688992620953200143688061024092623556471053006464123205133894607923801371986027458274343737860395496260538663183193877539815179246700525865152165600985105257601565]

def fast_pow(a, exponent, mod):
    result = 1
    a = a % mod
    while exponent > 0:
        if exponent % 2 == 1:
            result = (result * a) % mod
        a = (a * a) % mod
        exponent = exponent // 2
    return result

# 示例：计算 a^((p-1)/2) mod p
#p = 1000003  # 大素数
for a in ints:   # 大整数
    exponent = (p - 1) // 2
    result = fast_pow(a, exponent, p)

    if result == 1:
        print(f"{a} 是模 {p} 的二次剩余")
    elif result == p-1:  # -1 ≡ p-1 (mod p)
        print(f"{a} 不是模 {p} 的二次剩余")

def cipolla(a, p):
    assert pow(a, (p-1)//2, p) == 1, "a 不是模 p 的二次剩余"
    
    # 寻找 t 使得 t^2 - a 是非二次剩余
    t = 0
    while pow((t*t - a) % p, (p-1)//2, p) != p-1:
        t += 1
    
    # 扩域乘法定义
    def multiply(x1, y1, x2, y2, w):
        return (x1*x2 + y1*y2*w) % p, (x1*y2 + y1*x2) % p
    
    # 快速幂计算 (t + sqrt(w))^((p+1)/2)
    x, y = 1, 0
    exponent = (p + 1) // 2
    base_x, base_y = t, 1
    w = (t*t - a) % p
    
    while exponent > 0:
        if exponent % 2 == 1:
            x, y = multiply(x, y, base_x, base_y, w)
        base_x, base_y = multiply(base_x, base_y, base_x, base_y, w)
        exponent = exponent // 2
    
    return x, p - x

# 示例
x1, x2 = cipolla(a, p)
print(f"解为：{x1} 和 {x2}，验证：{pow(x1, 2, p) == a} 和 {pow(x2, 2, p) == a}")


